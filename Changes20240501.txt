main.html
1.	Used url_for() to generate URLs for the logo image and other links:
	Changed src="../static/images/logo.png" to src="{{ url_for('static', filename='images/logo.png') }}".
	Changed href="main.html" to href="{{ url_for('main') }}".
	Changed href="login.html" to href="{{ url_for('login') }}".
	Changed href="post.html" to href="{{ url_for('post') }}".
2.	Wrapped the logo image inside an anchor tag with the navbar-brand class to make it a clickable link to the main page.
3.	Used Jinja2 templating to conditionally render the login button:
	Removed the comments and used {% if not logged_in %} and {% endif %} to conditionally display the login button.
4.	Wrapped the main content inside a <main> tag for semantic HTML structure.
	Using a <main> tag to wrap the main content of a webpage is a semantic HTML practice that improves the structure and accessibility of the document. 	Here are a few reasons why using the <main> tag is beneficial:
	1. Semantic meaning: The <main> tag explicitly defines the main content area of a webpage. It provides a clear indication to browsers, search engines, and 	assistive technologies that the enclosed content is the primary focus of the page. This semantic meaning helps in understanding the structure and 	purpose of the content.
	2. Accessibility: Assistive technologies, such as screen readers, can utilize the <main> tag to quickly navigate to the main content of the page. By wrapping 	the main content within a <main> tag, you provide a landmark for users who rely on assistive technologies, allowing them to skip repetitive or less 	relevant content and focus on the primary information.
	3. SEO benefits: Search engines use the semantic structure of a webpage to understand its content and relevance. By using the <main> tag, you signal to 	search engines that the enclosed content is the focus of the page. This can potentially improve the search engine ranking and visibility of your webpage 	for relevant queries.
	4. Readability and maintainability: Using semantic tags like <main> enhances the readability and maintainability of your HTML code. It makes the code 	more self-explanatory and easier to understand for developers who may work on the project in the future. It also helps in separating the main content 	from other sections of the page, such as the header, footer, or sidebar.
	5. Future proofing: As web standards evolve, using semantic tags like <main> ensures that your webpage remains compatible with future technologies 	and devices. It provides a standardized way of defining the main content, which can be leveraged by new tools and platforms.
5.	Added a reference to a custom JavaScript file (script.js) using url_for():
	Added <script src="{{ url_for('static', filename='js/script.js') }}"></script> before the closing </body> tag.
6.	Removed the unnecessary comments and whitespace.

login.html
1.	Updated the <title> to "Login Page" to reflect the specific page.
2.	Used url_for() to generate the correct URLs for the CSS file, logo image, and registration page link.
3.	Wrapped the main content inside a <main> tag for semantic HTML structure.
4.	Removed the "active" class from the "Home" navigation item since the login page is not the active page.
5.	Added the missing url_for() for the registration page link.
6.	Moved the Google Sign-In integration inside the <main> tag for better structure.
7.	Added the missing <script> tag for the custom JavaScript file using url_for().
8.	Removed the unnecessary whitespace and formatted the code for better readability.

register.html
1.	Updated the <title> to "Post Page" to reflect the specific page.
2.	Used url_for() to generate the correct URLs for the CSS file, home page link, and post page link.
3.	Updated the navigation menu items to include "Home" and "Post" instead of "Forums" and "Tag". Adjusted the active class accordingly.
4.	Added a <main> tag to wrap the main content of the page. This is where you should add your post creation form or content.
5.	Added a <footer> section with a copyright notice.
6.	Included the necessary JavaScript files for Bootstrap and added a custom script.js file using url_for().
7.	Formatted the code for better readability.

post.html
1.	Updated the <title> to "Register Page" to reflect the specific page.
2.	Used url_for() to generate the correct URLs for the CSS file, logo image, and form action.
3.	Wrapped the logo image inside an anchor tag with the navbar-brand class to make it a clickable link to the main page.
4.	Updated the navigation menu to include a link to the main page and removed the commented-out sign-in/log-in button.
5.	Wrapped the registration form inside a <main> tag for semantic HTML structure.
6.	Adjusted the styles of the registration form to center it vertically and horizontally, and set a maximum width of 400px.
7.	Added appropriate input fields for username, email, password, and password confirmation.
8.	Used the url_for() function to set the form action to the registration route.
9.	Added a <footer> section with a copyright notice.
10.	Included the necessary JavaScript files for Bootstrap and added a custom script.js file using url_for().
11.	Formatted the code for better readability.